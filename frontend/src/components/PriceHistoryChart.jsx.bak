import React, { useEffect, useRef, useState } from 'react';
import './PriceHistoryChart.css';

// DEBUG MODE - Set to false to disable all diagnostic logging (massive performance boost)
const DEBUG_MODE = false;
const debugLog = (...args) => { if (DEBUG_MODE) console.log(...args); };

const PriceHistoryChart = ({ coin, width, height = 200 }) => {
  // Use parent container width - if width is "100%" or similar, use full container
  const chartWidth = width === "100%" ? "100%" : (width || 280);
  const canvasRef = useRef(null);
  const [chartData, setChartData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [hoveredPoint, setHoveredPoint] = useState(null); // For tooltip
  
  // Diagnostic timing
  const mountTimeRef = useRef(Date.now());
  const drawTimeRef = useRef(null);

  // Helper functions for tooltip
  const formatPrice = (price) => {
    if (price < 0.01) return `$${price.toFixed(6)}`;
    if (price < 1) return `$${price.toFixed(4)}`;
    return `$${price.toFixed(2)}`;
  };

  const formatTime = (timestamp) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  // Handle canvas mouse events for tooltip
  const handleCanvasMouseMove = (event) => {
    if (!chartData?.dataPoints || !canvasRef.current) return;

    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    const mouseX = event.clientX - rect.left;
    const mouseY = event.clientY - rect.top;

    // Find closest data point
    const containerWidth = canvas.parentElement?.offsetWidth || (typeof chartWidth === 'number' ? chartWidth : 280);
    const containerHeight = height;
    const padding = { top: 5, right: 0, bottom: 5, left: 0 };
    const chartWidthCalc = containerWidth;
    
    const pointIndex = Math.round((mouseX / chartWidthCalc) * (chartData.dataPoints.length - 1));
    const clampedIndex = Math.max(0, Math.min(pointIndex, chartData.dataPoints.length - 1));
    
    if (chartData.dataPoints[clampedIndex]) {
      const dataPoint = chartData.dataPoints[clampedIndex];
      setHoveredPoint({
        x: mouseX,
        y: mouseY,
        price: dataPoint.price,
        time: dataPoint.timestamp,
        index: clampedIndex
      });
    }
  };

  const handleCanvasMouseLeave = () => {
    setHoveredPoint(null);
  };

  // Diagnostic logging - DISABLED in production for performance
  const DEBUG_MODE = false; // Set to true only for debugging
  
  useEffect(() => {
    if (DEBUG_MODE) {
      console.log('🔍 [CHART DIAGNOSTIC] Component mounted at:', new Date().toISOString());
      console.log('🔍 [CHART DIAGNOSTIC] Coin data:', {
        symbol: coin?.symbol,
        tokenAddress: coin?.tokenAddress,
        mintAddress: coin?.mintAddress,
        pairAddress: coin?.pairAddress,
        hasRequiredAddress: !!(coin?.tokenAddress || coin?.mintAddress || coin?.pairAddress)
      });
    }
    
    return () => {
      if (DEBUG_MODE) {
        const totalTime = Date.now() - mountTimeRef.current;
        console.log('🔍 [CHART DIAGNOSTIC] Component unmounted after', totalTime, 'ms');
      }
    };
  }, []);

  useEffect(() => {
    if (DEBUG_MODE) {
      console.log('🔍 [CHART DIAGNOSTIC] Dependency changed - coin data');
      console.log('🔍 [CHART DIAGNOSTIC] Generating 24-hour blended chart from DexScreener price changes');
    }
    
    if (coin) {
      // Check if we have pre-generated chart data from backend enrichment
      if (coin.cleanChartData && coin.cleanChartData.dataPoints) {
        if (DEBUG_MODE) console.log('✅ [CHART] Using pre-generated chart data from backend enrichment');
        const chartData = coin.cleanChartData;
        
        // Calculate min/max for display
        const prices = chartData.dataPoints.map(d => d.price);
        const minPrice = Math.min(...prices);
        const maxPrice = Math.max(...prices);
        
        setChartData({
          tokenInfo: {
            address: coin.mintAddress || coin.tokenAddress,
            minPrice,
            maxPrice,
            priceChange24h: coin.priceChanges?.change24h || coin.priceChange?.h24 || 0
          },
          dataPoints: chartData.dataPoints,
          metadata: {
            timeframe: '24H',
            dataPoints: chartData.dataPoints.length,
            source: 'Backend pre-generated (DexScreener)'
          }
        });
        setLoading(false);
      } else {
        // Fallback: Generate chart from DexScreener price change anchors client-side
        console.log('⚠️  [CHART] No pre-generated data, generating client-side');
        generateBlended24HourChart();
      }
    } else {
      console.log('❌ [CHART DIAGNOSTIC] No coin data available');
      setError('No coin data available');
      setLoading(false);
    }
  }, [coin?.mintAddress || coin?.tokenAddress]);

  // Draw chart immediately when data is ready
  useEffect(() => {
    console.log('🔍 [CHART DIAGNOSTIC] Chart data effect triggered:', {
      hasChartData: !!chartData,
      hasDataPoints: !!(chartData?.dataPoints),
      dataPointsLength: chartData?.dataPoints?.length || 0
    });
    
    if (chartData && chartData.dataPoints && chartData.dataPoints.length > 0) {
      drawTimeRef.current = Date.now();
      drawChart(chartData.dataPoints);
      const drawDuration = Date.now() - drawTimeRef.current;
      console.log('🔍 [CHART DIAGNOSTIC] Chart drawn in', drawDuration, 'ms');
    }
  }, [chartData]);

  // Generate blended 24-hour chart using multiple DexScreener price change anchors
  const generateBlended24HourChart = () => {
    const generateStartTime = Date.now();
    console.log('📊 [BLENDED CHART] Starting 24-hour blended chart generation');
    
    setLoading(true);
    setError(null);
    
    try {
      const currentPrice = coin?.price_usd ?? coin?.priceUsd ?? coin?.price ?? 0;
      
      if (!currentPrice || currentPrice === 0) {
        throw new Error('No valid price data');
      }
      
      // Get all available price changes from DexScreener
      const priceChanges = coin?.priceChanges || coin?.priceChange || {};
      const change5m = priceChanges.change5m || priceChanges.m5 || coin?.change_5m || null;
      const change1h = priceChanges.change1h || priceChanges.h1 || coin?.change_1h || null;
      const change6h = priceChanges.change6h || priceChanges.h6 || coin?.change_6h || null;
      const change24h = priceChanges.change24h || priceChanges.h24 || coin?.change_24h || coin?.change24h || 0;
      
      console.log('📊 [BLENDED CHART] Price change anchors:', {
        currentPrice,
        change5m,
        change1h,
        change6h,
        change24h
      });
      
      // Generate anchor points for 24-hour period
      const anchors = createPriceAnchors(currentPrice, { change5m, change1h, change6h, change24h });
      
      // Interpolate 24 hourly points between anchors
      const dataPoints = interpolateHourlyPoints(anchors);
      
      // Calculate min/max for chart display
      const prices = dataPoints.map(d => d.price);
      const minPrice = Math.min(...prices);
      const maxPrice = Math.max(...prices);
      
      setChartData({
        tokenInfo: {
          address: coin.mintAddress || coin.tokenAddress,
          minPrice,
          maxPrice,
          priceChange24h: change24h
        },
        dataPoints,
        metadata: {
          timeframe: '24H',
          dataPoints: dataPoints.length,
          source: 'DexScreener blended anchors'
        }
      });
      
      const totalDuration = Date.now() - generateStartTime;
      console.log(`✅ [BLENDED CHART] Generated ${dataPoints.length} points in ${totalDuration}ms`);
      
    } catch (error) {
      console.error('❌ [BLENDED CHART] Generation failed:', error);
      setError('Unable to generate chart');
    } finally {
      setLoading(false);
    }
  };
  
  // Create price anchor points from DexScreener price changes
  const createPriceAnchors = (currentPrice, changes) => {
    const anchors = [];
    const now = Date.now();
    
    // Always add current price as most recent anchor
    anchors.push({
      hoursAgo: 0,
      timestamp: now,
      price: currentPrice
    });
    
    // Add 5-minute anchor if available (0.083 hours ago)
    if (changes.change5m !== null) {
      const price5mAgo = currentPrice / (1 + changes.change5m / 100);
      anchors.push({
        hoursAgo: 0.083,
        timestamp: now - 5 * 60 * 1000,
        price: price5mAgo
      });
    }
    
    // Add 1-hour anchor if available
    if (changes.change1h !== null) {
      const price1hAgo = currentPrice / (1 + changes.change1h / 100);
      anchors.push({
        hoursAgo: 1,
        timestamp: now - 1 * 60 * 60 * 1000,
        price: price1hAgo
      });
    }
    
    // Add 6-hour anchor if available
    if (changes.change6h !== null) {
      const price6hAgo = currentPrice / (1 + changes.change6h / 100);
      anchors.push({
        hoursAgo: 6,
        timestamp: now - 6 * 60 * 60 * 1000,
        price: price6hAgo
      });
    }
    
    // Always add 24-hour anchor (required)
    const price24hAgo = currentPrice / (1 + changes.change24h / 100);
    anchors.push({
      hoursAgo: 24,
      timestamp: now - 24 * 60 * 60 * 1000,
      price: price24hAgo
    });
    
    // Sort by time (oldest first)
    anchors.sort((a, b) => b.hoursAgo - a.hoursAgo);
    
    console.log('📊 [BLENDED CHART] Created anchors:', anchors.map(a => ({
      hoursAgo: a.hoursAgo,
      price: a.price
    })));
    
    return anchors;
  };
  
  // Interpolate 24 hourly data points between anchors with smooth curves
  const interpolateHourlyPoints = (anchors) => {
    const dataPoints = [];
    const now = Date.now();
    
    // Create deterministic seed from coin data for consistent randomness
    const coinId = (coin?.mintAddress || coin?.tokenAddress || coin?.symbol || 'unknown');
    const coinSeed = coinId.split('').reduce((acc, char, i) => acc + char.charCodeAt(0) * (i + 1), 0);
    let seed = coinSeed % 233280;
    const seededRandom = () => {
      seed = (seed * 9301 + 49297) % 233280;
      return seed / 233280;
    };
    
    // Generate 24 hourly points (25 points for 0-24 hours)
    for (let hour = 24; hour >= 0; hour--) {
      const targetHoursAgo = hour;
      const timestamp = now - hour * 60 * 60 * 1000;
      
      // Find surrounding anchors
      let lowerAnchor = null;
      let upperAnchor = null;
      
      for (let i = 0; i < anchors.length - 1; i++) {
        if (anchors[i].hoursAgo >= targetHoursAgo && anchors[i + 1].hoursAgo <= targetHoursAgo) {
          lowerAnchor = anchors[i];
          upperAnchor = anchors[i + 1];
          break;
        }
      }
      
      // If no surrounding anchors found, use closest anchor
      if (!lowerAnchor || !upperAnchor) {
        const closestAnchor = anchors.reduce((closest, anchor) => {
          return Math.abs(anchor.hoursAgo - targetHoursAgo) < Math.abs(closest.hoursAgo - targetHoursAgo) 
            ? anchor : closest;
        });
        dataPoints.push({
          timestamp,
          price: closestAnchor.price,
          time: new Date(timestamp).toLocaleTimeString()
        });
        continue;
      }
      
      // Interpolate between anchors
      const timeFraction = (lowerAnchor.hoursAgo - targetHoursAgo) / (lowerAnchor.hoursAgo - upperAnchor.hoursAgo);
      const basePrice = lowerAnchor.price + (upperAnchor.price - lowerAnchor.price) * timeFraction;
      
      // Add realistic volatility (smaller for meme coins to avoid extreme spikes)
      const priceRange = Math.abs(upperAnchor.price - lowerAnchor.price);
      const volatility = priceRange * 0.08; // 8% of local range for realism
      const noise = (seededRandom() - 0.5) * volatility;
      
      // Apply smoothing - use sine wave for natural oscillation
      const wavePhase = (hour / 24) * Math.PI * 2;
      const wave = Math.sin(wavePhase + coinSeed) * volatility * 0.3;
      
      let price = basePrice + noise + wave;
      
      // Ensure price stays within reasonable bounds
      price = Math.max(0.000001, price);
      price = Math.max(lowerAnchor.price * 0.85, Math.min(upperAnchor.price * 1.15, price));
      
      dataPoints.push({
        timestamp,
        price,
        time: new Date(timestamp).toLocaleTimeString()
      });
    }
    
    // Reverse to get chronological order (oldest to newest)
    dataPoints.reverse();
    
    return dataPoints;
  };
  
  const drawChart = (dataPoints) => {
    const drawStartTime = Date.now();
    console.log('🔍 [CHART DIAGNOSTIC] Starting chart draw with', dataPoints.length, 'points');
    
    const canvas = canvasRef.current;
    if (!canvas || !dataPoints || dataPoints.length === 0) {
      console.log('❌ [CHART DIAGNOSTIC] Draw aborted - missing canvas or data');
      return;
    }

    const ctx = canvas.getContext('2d');
    
    // Use parent container width like CleanPriceChart does
    const containerWidth = canvas.parentElement?.offsetWidth || (typeof chartWidth === 'number' ? chartWidth : 280);
    const containerHeight = height;
    
    // Use device pixel ratio for HD rendering
    const dpr = window.devicePixelRatio || 1;
    
    console.log('🔍 [CHART DIAGNOSTIC] Canvas dimensions:', {
      width: containerWidth,
      height: containerHeight,
      dpr: dpr,
      canvasElement: !!canvas
    });
    
    // Set canvas size for crisp HD rendering using container dimensions
    canvas.width = containerWidth * dpr;
    canvas.height = containerHeight * dpr;
    canvas.style.width = containerWidth + 'px';
    canvas.style.height = containerHeight + 'px';
    ctx.scale(dpr, dpr);

    // Debug: Log actual canvas and chart dimensions
    console.log('📐 [CHART DIMENSIONS]', {
      containerWidth: containerWidth,
      containerHeight: containerHeight,
      canvasWidth: canvas.width,
      canvasHeight: canvas.height,
      devicePixelRatio: dpr
    });

    // Clear canvas with white background
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, containerWidth, containerHeight);

    // Calculate dimensions - TRUE edge-to-edge, no padding at all
    const padding = { top: 5, right: 0, bottom: 5, left: 0 };
    const chartWidth = containerWidth; // Use full container width
    const chartHeight = containerHeight - padding.top - padding.bottom;

    // Find min/max for scaling with slight padding
    const prices = dataPoints.map(d => d.price);
    const minPrice = Math.min(...prices) * 0.98; // 2% padding
    const maxPrice = Math.max(...prices) * 1.02; // 2% padding
    const priceRange = maxPrice - minPrice || 0.0001;

    console.log('🔍 [CHART DIAGNOSTIC] Price range:', {
      min: minPrice,
      max: maxPrice,
      range: priceRange
    });

    // Determine color based on trend
    const isPositive = prices[prices.length - 1] > prices[0];
    const lineColor = isPositive ? '#22c55e' : '#ef4444';

    // Build path points - TRUE edge-to-edge positioning
    const points = dataPoints.map((point, index) => {
      const x = (index / (dataPoints.length - 1)) * chartWidth; // Start from 0, end at chartWidth
      const y = padding.top + (1 - (point.price - minPrice) / priceRange) * chartHeight;
      return { x, y };
    });

    // Debug: Log actual drawing coordinates
    console.log('📍 [CHART COORDINATES]', {
      chartWidth,
      chartHeight, 
      padding,
      firstPoint: points[0],
      lastPoint: points[points.length - 1],
      totalPoints: points.length
    });

    // Draw smooth line with better quality
    ctx.beginPath();
    ctx.moveTo(points[0].x, points[0].y);
    
    // Use smooth curves for better appearance
    for (let i = 1; i < points.length; i++) {
      ctx.lineTo(points[i].x, points[i].y);
    }
    
    ctx.strokeStyle = lineColor;
    ctx.lineWidth = 2.5;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';
    ctx.stroke();
    
    const drawDuration = Date.now() - drawStartTime;
    console.log('🔍 [CHART DIAGNOSTIC] Chart drawing completed in', drawDuration, 'ms');
  };

  if (error) {
    return (
      <div className="price-history-chart error">
        <div className="error-message">
          <div className="error-text">
            <h3>Chart Unavailable</h3>
            <p>{error}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="price-history-chart">
      {/* 24-Hour Chart Header */}
      <div className="chart-header">
        <span className="chart-timeframe">24-Hour Price Chart</span>
      </div>

      {/* Chart Container */}
      <div className="chart-container">
        {loading ? (
          <div className="chart-loading">
            <div className="loading-spinner">⟳</div>
            <span>Loading chart...</span>
          </div>
        ) : (
          <>
            <canvas 
              ref={canvasRef} 
              className="price-canvas"
              onMouseMove={handleCanvasMouseMove}
              onMouseLeave={handleCanvasMouseLeave}
            />
            
            {/* Tooltip */}
            {hoveredPoint && (
              <div 
                className="chart-tooltip"
                style={{
                  left: hoveredPoint.x > (canvasRef.current?.offsetWidth * 0.7 || 200) ? `${hoveredPoint.x - 140}px` : `${hoveredPoint.x + 10}px`,
                  top: `${hoveredPoint.y - 70}px`,
                }}
              >
                <div className="tooltip-price">{formatPrice(hoveredPoint.price)}</div>
                <div className="tooltip-time">{formatTime(hoveredPoint.time)}</div>
                <div className="tooltip-disclaimer">Estimated from DexScreener</div>
              </div>
            )}
          </>
        )}
      </div>
      
      {/* Data Source Disclaimer */}
      <div className="chart-disclaimer">
        <span className="disclaimer-text">
          📊 Blended 24h estimate from DexScreener price changes • Use "Advanced View" for live data
        </span>
      </div>
    </div>
  );
};

export default PriceHistoryChart;